"""
QA Compliance and Advice Quality Analysis (2024)

This script:
1. Loads and preprocesses advisor query data
2. Calculates QA compliance vs. breaches
3. Classifies QA feedback into good/bad
4. Computes query-level and advisor-level quality metrics
5. Projects undetected risks using statistical confidence intervals
6. Generates a multi-sheet Excel report with summary, breakdowns, and charts

Author: [Your Name]
"""

# =========================
# Import Required Libraries
# =========================

import pandas as pd
import numpy as np
from statsmodels.stats.proportion import proportion_confint


# =========================
# Data Loading & Preprocessing
# =========================

def load_data(file_path: str, sheet_name: str = "Sheet1") -> pd.DataFrame:
    """
    Load the input Excel file into a pandas DataFrame.
    """
    return pd.read_excel(file_path, sheet_name=sheet_name)


def preprocess(df: pd.DataFrame) -> pd.DataFrame:
    """
    Preprocess the dataset:
    - Convert dates to datetime
    - Keep only queries closed in 2024
    - Normalize QA decision text
    """
    df = df.copy()

    df["Advice_Closed_Date"] = pd.to_datetime(df["Advice_Closed_Date"], errors="coerce")
    df["Qa_Date"] = pd.to_datetime(df["Qa_Date"], errors="coerce")

    # Filter for 2024 closed queries only
    df = df[df["Advice_Closed_Date"].dt.year == 2024]

    # Clean QA decision strings
    df["Qa_Decision"] = df["Qa_Decision"].fillna("").str.strip().str.title()

    return df


def assign_quarter(df: pd.DataFrame) -> pd.DataFrame:
    """
    Add calendar quarter column (Q1–Q4).
    """
    df = df.copy()
    df["Quarter"] = df["Advice_Closed_Date"].dt.to_period("Q")
    return df


# =========================
# Compliance Calculations
# =========================

def calculate_required_qas(df: pd.DataFrame) -> pd.DataFrame:
    """
    Compliance mandate:
    - If advisor closed 1 query → 1 QA required
    - If advisor closed ≥2 queries → 2 QAs required
    """
    grouped = df.groupby(["Assigned_To_Name", "Quarter"]).size().reset_index(name="Queries_Closed")
    grouped["Required_QA"] = grouped["Queries_Closed"].apply(lambda x: 1 if x == 1 else 2)
    return grouped


def calculate_done_qas(df: pd.DataFrame) -> pd.DataFrame:
    """
    Count how many QAs were actually done per advisor per quarter.
    """
    qa_done = df[df["Qa_Status"] == "QA Done"]
    return qa_done.groupby(["Assigned_To_Name", "Quarter"]).size().reset_index(name="QA_Done")


def compliance_summary(required: pd.DataFrame, done: pd.DataFrame) -> pd.DataFrame:
    """
    Merge required vs done and calculate breaches.
    """
    merged = pd.merge(required, done, on=["Assigned_To_Name", "Quarter"], how="left")
    merged["QA_Done"] = merged["QA_Done"].fillna(0)
    merged["Breached"] = merged["QA_Done"] < merged["Required_QA"]
    merged["Shortage"] = (merged["Required_QA"] - merged["QA_Done"]).clip(lower=0)
    return merged


# =========================
# Feedback Analysis
# =========================

def classify_feedback(df: pd.DataFrame) -> pd.DataFrame:
    """
    Classify feedback outcomes:
    - Good = ["Good", "Best Practice"]
    - Bad = ["Developing - Administration", "Developing - Advice"]
    - Unknown = not QA'ed
    """
    df = df.copy()
    favourable = ["Good", "Best Practice"]
    unfavourable = ["Developing - Administration", "Developing - Advice"]

    df["Feedback"] = np.where(df["Qa_Decision"].isin(favourable), "Good",
                        np.where(df["Qa_Decision"].isin(unfavourable), "Bad", "Unknown"))
    return df


# =========================
# Helper Functions: Statistics
# =========================

def wilson_interval(successes: int, n: int, alpha: float = 0.05):
    """
    Wilson confidence interval for a binomial proportion.
    """
    if n == 0:
        return (0.0, 0.0)
    return proportion_confint(successes, n, alpha=alpha, method="wilson")


# =========================
# Metrics: Feedback Quality
# =========================

def bad_feedback_metrics(df: pd.DataFrame) -> dict:
    """
    Generate detailed feedback quality metrics:
    - Percent good/bad
    - Advisors with 1, 2, >2 bads
    - Breakdown by advisor, quarter, type
    - Distribution stats
    """
    qa_done = df[df["Qa_Status"] == "QA Done"]
    bad_df = qa_done[qa_done["Feedback"] == "Bad"]

    metrics = {}
    metrics["good_pct"] = round((qa_done["Feedback"].eq("Good").sum() / len(qa_done)) * 100, 2) if len(qa_done) > 0 else 0
    metrics["bad_pct"] = round((bad_df.shape[0] / len(qa_done)) * 100, 2) if len(qa_done) > 0 else 0

    advisor_bad_counts = bad_df.groupby("Assigned_To_Name").size().reset_index(name="Bad_Count")
    metrics["advisors_1_bad"] = (advisor_bad_counts["Bad_Count"] == 1).sum()
    metrics["advisors_2_bad"] = (advisor_bad_counts["Bad_Count"] == 2).sum()
    metrics["advisors_gt2_bad"] = (advisor_bad_counts["Bad_Count"] > 2).sum()

    metrics["bad_by_advisor"] = bad_df.groupby("Assigned_To_Name").size().reset_index(name="Bad_Feedbacks")
    metrics["bad_by_quarter"] = bad_df.groupby("Quarter").size().reset_index(name="Bad_Feedbacks")
    metrics["bad_by_type"] = bad_df.groupby("Request_Type").size().reset_index(name="Bad_Feedbacks")

    return metrics


# =========================
# Metrics: Population-Level Projections
# =========================

def project_bad_feedbacks(df: pd.DataFrame) -> dict:
    """
    Project undetected bad advice at population level (all queries).
    """
    qa_done = df[df["Qa_Status"] == "QA Done"]
    total_qas = len(qa_done)
    bad_qas = qa_done["Feedback"].eq("Bad").sum()
    total_queries = len(df)

    bad_rate = bad_qas / total_qas if total_qas > 0 else 0
    projected_bads = bad_rate * total_queries
    ci_low, ci_high = wilson_interval(bad_qas, total_qas)

    return {
        "bad_rate": bad_rate,
        "projected_bads": projected_bads,
        "ci_low": ci_low * total_queries,
        "ci_high": ci_high * total_queries
    }


# =========================
# Metrics: Advisor-Level Coverage & Risk
# =========================

def advisor_level_metrics(df: pd.DataFrame) -> dict:
    """
    Advisor-level metrics:
    - Total advisors (closed ≥1 query in 2024)
    - Advisors QA'ed
    - % QA'ed advisors
    - Advisors with ≥1 bad feedback
    - % of QA'ed advisors with bad feedback
    - Projected bad advisors among not-QA'ed (Wilson CI)
    """
    metrics = {}

    total_advisors = df["Assigned_To_Name"].nunique()
    advisors_qaed = df[df["Qa_Status"] == "QA Done"]["Assigned_To_Name"].nunique()
    advisors_with_bad = df[(df["Qa_Status"] == "QA Done") & (df["Feedback"] == "Bad")]["Assigned_To_Name"].nunique()

    metrics["total_advisors"] = total_advisors
    metrics["qaed_advisors"] = advisors_qaed
    metrics["pct_qaed_advisors"] = round((advisors_qaed / total_advisors) * 100, 2) if total_advisors > 0 else 0
    metrics["advisors_with_bad"] = advisors_with_bad
    metrics["pct_advisors_with_bad"] = round((advisors_with_bad / advisors_qaed) * 100, 2) if advisors_qaed > 0 else 0

    # Projection for non-QA'ed advisors
    n_total = total_advisors
    n_qa = advisors_qaed
    n_bad = advisors_with_bad
    n_nonqa = n_total - n_qa

    if n_qa > 0:
        p_low, p_high = wilson_interval(n_bad, n_qa)
        p_hat = n_bad / n_qa
        metrics["projected_bad_advisors"] = round(p_hat * n_nonqa, 2)
        metrics["ci_low_bad_advisors"] = round(p_low * n_nonqa, 2)
        metrics["ci_high_bad_advisors"] = round(p_high * n_nonqa, 2)
    else:
        metrics["projected_bad_advisors"] = 0
        metrics["ci_low_bad_advisors"] = 0
        metrics["ci_high_bad_advisors"] = 0

    return metrics


# =========================
# Report Generation
# =========================

def generate_excel_report(df: pd.DataFrame, compliance: pd.DataFrame,
                          feedback: dict, projections: dict,
                          advisor_metrics: dict, output_file: str):
    """
    Generate Excel report with:
    - Summary sheet (query + advisor metrics)
    - Quarterly compliance
    - Advisor details
    - Bad feedback breakdowns
    """
    with pd.ExcelWriter(output_file, engine="xlsxwriter") as writer:
        # =========================
        # Summary sheet
        # =========================
        summary_data = [
            # Query-level metrics
            ("Total Queries", len(df)),
            ("Total QAs Required", compliance["Required_QA"].sum()),
            ("Total QAs Done", compliance["QA_Done"].sum()),
            ("% QAs Done", round(compliance["QA_Done"].sum() / compliance["Required_QA"].sum() * 100, 2)),
            ("% Breached Instances", round(compliance["Breached"].mean() * 100, 2)),
            ("% Good Feedback", feedback["good_pct"]),
            ("% Bad Feedback", feedback["bad_pct"]),
            ("Projected Bad Feedbacks", round(projections["projected_bads"], 2)),
            ("95% CI Low (Queries)", round(projections["ci_low"], 2)),
            ("95% CI High (Queries)", round(projections["ci_high"], 2)),

            # Advisor-level metrics
            ("Total Advisors", advisor_metrics["total_advisors"]),
            ("Advisors QA'ed", advisor_metrics["qaed_advisors"]),
            ("% QA'ed Advisors", advisor_metrics["pct_qaed_advisors"]),
            ("Advisors with ≥1 Bad Feedback", advisor_metrics["advisors_with_bad"]),
            ("% Advisors with Bad Feedback", advisor_metrics["pct_advisors_with_bad"]),
            ("Projected Bad Advisors (non-QA'ed)", advisor_metrics["projected_bad_advisors"]),
            ("95% CI Low (Advisors)", advisor_metrics["ci_low_bad_advisors"]),
            ("95% CI High (Advisors)", advisor_metrics["ci_high_bad_advisors"])
        ]
        summary = pd.DataFrame(summary_data, columns=["Metric", "Value"])
        summary.to_excel(writer, sheet_name="Summary", index=False)

        # =========================
        # Other sheets
        # =========================
        compliance.to_excel(writer, sheet_name="Quarterly_Compliance", index=False)
        advisor_details = compliance.groupby("Assigned_To_Name").agg(
            Queries_Closed=("Queries_Closed", "sum"),
            QA_Required=("Required_QA", "sum"),
            QA_Done=("QA_Done", "sum"),
            Breaches=("Breached", "sum"),
            Shortages=("Shortage", "sum")
        ).reset_index()
        advisor_details.to_excel(writer, sheet_name="Advisor_Details", index=False)
        feedback["bad_by_advisor"].to_excel(writer, sheet_name="Bad_By_Advisor", index=False)
        feedback["bad_by_quarter"].to_excel(writer, sheet_name="Bad_By_Quarter", index=False)
        feedback["bad_by_type"].to_excel(writer, sheet_name="Bad_By_Type", index=False)

    print(f"Report saved to {output_file}")


# =========================
# Main Execution
# =========================

def main():
    input_file = "input.xlsx"   # Replace with your Excel file
    output_file = "qa_compliance_report_2024.xlsx"

    df = load_data(input_file)
    df = preprocess(df)
    df = assign_quarter(df)
    df = classify_feedback(df)

    required = calculate_required_qas(df)
    done = calculate_done_qas(df)
    compliance = compliance_summary(required, done)

    feedback = bad_feedback_metrics(df)
    projections = project_bad_feedbacks(df)
    advisor_metrics = advisor_level_metrics(df)

    generate_excel_report(df, compliance, feedback, projections, advisor_metrics, output_file)


if __name__ == "__main__":
    main()