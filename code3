"""
QA Compliance Analysis Script with Summary Dashboard
Author: Sayantan Dutta
Description:
    - Reads QA data from Excel
    - Applies compliance rules
    - Generates a multi-sheet Excel report with tables and charts
    - Includes an executive Summary Dashboard
"""

import pandas as pd
import os

# -------------------------
# 1. Load data
# -------------------------
input_file = "your_input_file.xlsx"   # <-- Replace with your dataset path
df = pd.read_excel(input_file)

# -------------------------
# 2. Helper functions
# -------------------------
def get_quarter(date):
    return f"{date.year}-Q{((date.month - 1)//3) + 1}"

def quarter_index(q):
    year, qtr = q.split("-Q")
    return int(year) * 4 + int(qtr)

def quarter_diff(row):
    closed_index = quarter_index(row["Closed_Quarter"])
    qa_index = quarter_index(row["Qa_Quarter"])
    return qa_index - closed_index

# -------------------------
# 3. Preprocess data
# -------------------------
df["Advice_Closed_Date"] = pd.to_datetime(df["Advice_Closed_Date"], errors="coerce")
df["Qa_Date"] = pd.to_datetime(df["Qa_Date"], errors="coerce")
df = df.dropna(subset=["Advice_Closed_Date"])

df["Closed_Quarter"] = df["Advice_Closed_Date"].apply(get_quarter)
df["Qa_Quarter"] = df["Qa_Date"].dropna().apply(get_quarter)

favourable = ["Good", "Best Practice"]
unfavourable = ["Developing - Administration", "Developing - Advice"]

df["Qa_Category"] = df["Qa_Decision"].apply(
    lambda x: "Favourable" if x in favourable else ("Unfavourable" if x in unfavourable else "Others")
)

# -------------------------
# 4. Compliance breaches per advisor per quarter
# -------------------------
compliance_results = []
for (advisor, quarter), group in df.groupby(["Assigned_To_Name", "Closed_Quarter"]):
    closed_queries = group["Request_Reference"].nunique()
    qa_done = group[group["Qa_Status"] == "QA Done"]["Request_Reference"].nunique()
    required_qa = 1 if closed_queries == 1 else (2 if closed_queries >= 2 else 0)
    breach = qa_done < required_qa
    compliance_results.append([advisor, quarter, closed_queries, qa_done, required_qa, breach])

compliance_df = pd.DataFrame(compliance_results, columns=[
    "Advisor", "Quarter", "Closed_Queries", "QA_Done", "QA_Required", "Breach"
])

# -------------------------
# 5. Metrics
# -------------------------
total_required = compliance_df["QA_Required"].sum()
total_done = compliance_df["QA_Done"].sum()
compliance_rate = round((total_done / total_required * 100), 2) if total_required > 0 else 0
feedback_dist = df["Qa_Category"].value_counts(normalize=True) * 100

# Top 10 advisors with breaches
top_breaches = (
    compliance_df[compliance_df["Breach"]]
    .groupby("Advisor")["Breach"].count()
    .sort_values(ascending=False)
    .head(10)
    .reset_index()
    .rename(columns={"Breach": "Breach_Count"})
)

# -------------------------
# 6. Advisors with breach + deterioration
# -------------------------
advisors_with_deterioration = []
for advisor, group in df.groupby("Assigned_To_Name"):
    group = group.sort_values("Closed_Quarter")
    advisor_breaches = compliance_df[(compliance_df["Advisor"] == advisor) & (compliance_df["Breach"])]
    if not advisor_breaches.empty:
        first_breach_quarter = advisor_breaches.iloc[0]["Quarter"]
        breach_quarter_index = quarter_index(first_breach_quarter)
        group["quarter_index"] = group["Closed_Quarter"].apply(quarter_index)
        post_period = group[group["quarter_index"] <= breach_quarter_index + 2]
        if "Favourable" in post_period["Qa_Category"].values and "Unfavourable" in post_period["Qa_Category"].values:
            advisors_with_deterioration.append(advisor)

# -------------------------
# 7. Request type selection bias
# -------------------------
bias_records = []
for (advisor, quarter), group in df.groupby(["Assigned_To_Name", "Closed_Quarter"]):
    closed_types = group["Request_Type"].unique()
    qa_types = group[group["Qa_Status"] == "QA Done"]["Request_Type"].unique()
    if len(closed_types) > 1 and len(qa_types) == 1:
        bad_feedback = (group[group["Qa_Category"] == "Unfavourable"].shape[0] > 0)
        bias_records.append([advisor, quarter, list(closed_types), list(qa_types), bad_feedback])

bias_df = pd.DataFrame(bias_records, columns=["Advisor", "Quarter", "Closed_Types", "QA_Types", "Bad_Feedback"])

# -------------------------
# 8. QA Delay Analysis
# -------------------------
df = df.dropna(subset=["Qa_Quarter"])
df["Quarter_Delay"] = df.apply(quarter_diff, axis=1)
delay_dist = df["Quarter_Delay"].value_counts(normalize=True) * 100
feedback_by_delay = df.groupby("Quarter_Delay")["Qa_Category"].value_counts(normalize=True).unstack().fillna(0) * 100

# -------------------------
# 9. Save results to Excel with Summary Dashboard
# -------------------------
output_file = "QA_Compliance_Report.xlsx"
with pd.ExcelWriter(output_file, engine="xlsxwriter") as writer:
    # Write all analysis sheets
    compliance_df.to_excel(writer, sheet_name="Compliance", index=False)
    pd.DataFrame({"Total Required": [total_required], "Total Done": [total_done]}).to_excel(writer, sheet_name="QA_Totals", index=False)
    feedback_dist.to_frame("Percentage").to_excel(writer, sheet_name="Feedback_Distribution")
    pd.DataFrame({"Advisors": advisors_with_deterioration}).to_excel(writer, sheet_name="Feedback_Deterioration", index=False)
    if not bias_df.empty:
        bias_df.to_excel(writer, sheet_name="Request_Type_Bias", index=False)
    delay_dist.to_frame("Percentage").to_excel(writer, sheet_name="QA_Delay_Distribution")
    feedback_by_delay.to_excel(writer, sheet_name="Feedback_vs_Delay")
    top_breaches.to_excel(writer, sheet_name="Top_Breaches", index=False)

    # -------------------------
    # Create Summary Dashboard
    # -------------------------
    summary = pd.DataFrame({
        "Metric": ["Total QA Required", "Total QA Done", "Compliance Rate (%)"],
        "Value": [total_required, total_done, compliance_rate]
    })
    summary.to_excel(writer, sheet_name="Summary_Dashboard", index=False, startrow=1)

    workbook  = writer.book
    ws = writer.sheets["Summary_Dashboard"]

    # Add Feedback pie chart
    chart1 = workbook.add_chart({"type": "pie"})
    chart1.add_series({
        "categories": ["Feedback_Distribution", 1, 0, len(feedback_dist), 0],
        "values":     ["Feedback_Distribution", 1, 1, len(feedback_dist), 1],
    })
    chart1.set_title({"name": "Feedback Distribution"})
    ws.insert_chart("E2", chart1)

    # Add Compliance bar chart
    chart2 = workbook.add_chart({"type": "column"})
    chart2.add_series({
        "categories": ["Compliance", 1, 1, len(compliance_df), 1],
        "values":     ["Compliance", 1, 3, len(compliance_df), 3],
        "name": "QA Done"
    })
    chart2.add_series({
        "categories": ["Compliance", 1, 1, len(compliance_df), 1],
        "values":     ["Compliance", 1, 4, len(compliance_df), 4],
        "name": "QA Required"
    })
    chart2.set_title({"name": "QA Compliance (Done vs Required)"})
    ws.insert_chart("E20", chart2)

    # Add QA Delay distribution chart
    chart3 = workbook.add_chart({"type": "column"})
    chart3.add_series({
        "categories": ["QA_Delay_Distribution", 1, 0, len(delay_dist), 0],
        "values":     ["QA_Delay_Distribution", 1, 1, len(delay_dist), 1],
    })
    chart3.set_title({"name": "QA Delay Distribution"})
    ws.insert_chart("E38", chart3)

print(f"âœ… Report generated: {os.path.abspath(output_file)}")